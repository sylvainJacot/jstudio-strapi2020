{"ast":null,"code":"var _jsxFileName = \"/Users/sylv/Desktop/Work/Jacot Studio/WEBSITE/WEB/Jacot Studio 2020/02_Web/jcstudio-strapi/jctstudio20-front/src/components/05 Pages/BlogPosts/BlogPosts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { API_URL } from \"../../../config\";\nimport BlogPostItem from \"../BlogPosts/BlogPostItem.js\";\nimport parse from \"html-react-parser\";\n\nconst BlogPosts = () => {\n  const {\n    slug\n  } = useParams();\n  const [isLoading, setIsLoading] = useState(true);\n  const [postItem, setPostItem] = useState(null);\n  useEffect(() => {\n    console.log(slug);\n    fetch(API_URL + \"/blog-posts/\" + slug, {\n      method: \"GET\",\n      headers: {\n        Accept: \"Application/json\"\n      }\n    }).then(res => res.json()).then(response => {\n      setTimeout(() => {\n        setPostItem(response);\n        setIsLoading(false);\n        console;\n      }, 1000);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isLoading ? \"Loading...\" : postItem.map((item, index) => /*#__PURE__*/React.createElement(BlogPostItem, {\n    key: index,\n    Cover: item.cover.url,\n    MainTitlePost: item.MainTitlePost,\n    content: parse(item.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default BlogPosts;","map":{"version":3,"sources":["/Users/sylv/Desktop/Work/Jacot Studio/WEBSITE/WEB/Jacot Studio 2020/02_Web/jcstudio-strapi/jctstudio20-front/src/components/05 Pages/BlogPosts/BlogPosts.js"],"names":["React","useState","useEffect","useParams","styled","API_URL","BlogPostItem","parse","BlogPosts","slug","isLoading","setIsLoading","postItem","setPostItem","console","log","fetch","method","headers","Accept","then","res","json","response","setTimeout","map","item","index","cover","url","MainTitlePost","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAWN,SAAS,EAA1B;AAEA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAO,IAAAA,KAAK,CAACX,OAAO,GAAG,cAAV,GAA2BI,IAA5B,EAAkC;AACrCQ,MAAAA,MAAM,EAAE,KAD6B;AAErCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD;AAF4B,KAAlC,CAAL,CAMGC,IANH,CAMSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANjB,EAOGF,IAPH,CAOSG,QAAD,IAAc;AAClBC,MAAAA,UAAU,CAAC,MAAM;AACfX,QAAAA,WAAW,CAACU,QAAD,CAAX;AACAZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAG,QAAAA,OAAO;AACR,OAJS,EAIP,IAJO,CAAV;AAKD,KAbH;AAcD,GAhBQ,EAgBN,EAhBM,CAAT;AAmBA,sBACE,0CACGJ,SAAS,GACN,YADM,GAENE,QAAQ,CAACa,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,kBACX,oBAAC,YAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,KAAK,EAAED,IAAI,CAACE,KAAL,CAAWC,GAFpB;AAGE,IAAA,aAAa,EAAEH,IAAI,CAACI,aAHtB;AAIE,IAAA,OAAO,EAAEvB,KAAK,CAACmB,IAAI,CAACK,OAAN,CAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHN,CADF;AAcD,CAvCD;;AAyCA,eAAevB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { API_URL } from \"../../../config\";\nimport BlogPostItem from \"../BlogPosts/BlogPostItem.js\";\nimport parse from \"html-react-parser\";\n\nconst BlogPosts = () => {\n  const { slug } = useParams();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [postItem, setPostItem] = useState(null);\n\n  useEffect(() => {\n    console.log(slug);\n    fetch(API_URL + \"/blog-posts/\" + slug, {\n      method: \"GET\",\n      headers: {\n        Accept: \"Application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        setTimeout(() => {\n          setPostItem(response);\n          setIsLoading(false);\n          console\n        }, 1000);\n      });\n  }, []);\n\n\n  return (\n    <>\n      {isLoading\n        ? \"Loading...\"\n        : postItem.map((item, index) => (\n            <BlogPostItem\n              key={index}\n              Cover={item.cover.url}\n              MainTitlePost={item.MainTitlePost}\n              content={parse(item.content)}\n            />\n          ))}\n    </>\n  );\n};\n\nexport default BlogPosts;\n"]},"metadata":{},"sourceType":"module"}